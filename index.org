#+Title: HTML to CSV Converter
#+Email: nalisarc@gmail.com
#+author: Daniel Alexander Smith
* Metadata
#+name: Version_Number
#+BEGIN_EXAMPLE
  "0.3.0"
#+END_EXAMPLE
* Readme
#+name: readme
#+begin_src text :tangle readme.md
  html2csv is a simple python script that converts html tables into a csv spreadsheet.
  A gist of the program can be found here; but for more indepth documention, commentary, and other useful tidbits
  check out index.org.
#+end_src
* Licence
#+name: Licence
#+BEGIN_SRC text :tangle licence.md 
  The MIT License (MIT)
  Copyright (c) 2016 Daniel Alexander Smith

  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#+END_SRC
* Setup
#+name: pip_setup
#+BEGIN_SRC python :tangle setup.py :var v=Version_Number
  from setuptools import setup

  setup(
      name="html2csv",
      version=v,
      description='A html to csv table converter',
      url='https://github.com/Nalisarc/html2csv',
      author='Daniel Alexander Smith',
      author_email='nalisarc@gmail.com',
      license='MIT',
      scripts=['bin/html2csv'],
      packages=['html2csv'],
      install_requires=[
          'bs4',
          'requests',
      ],
      zip_safe=False)
#+END_SRC

#+name: freeze_setup.py
#+BEGIN_SRC python :tangle freeze_setup.py :shebang #!/usr/bin/python3 :var version=Version_Number
  """
  This script is for creating a frozen version of the program.
  This is useful for Windows so you can have a nice exe file to run
  """

  from cx_Freeze import setup, Executable

  # Dependencies are automatically detected, but it might need
  # fine tuning.
  buildOptions = dict(packages = [], excludes = [])

  base = 'Console'

  executables = [
      Executable('html2csv-script', base=base, targetName = 'html2csv.exe')
  ]

  setup(name='html2csv',
  version = version,
  description = 'A simple HTML to CSV converter',
  options = dict(build_exe = buildOptions),
  executables = executables)

#+END_SRC
* Package Initialization
#+BEGIN_SRC python :tangle html2csv/__init__.py :noweb yes 
  # Third Party Modules
  from bs4 import BeautifulSoup
  import requests

  # Standard Library Modules
  import argparse
  import re
  import csv
  import sys

  # functions
  <<file_reader>>
  <<url_reader>>
  <<html_parser>>
  <<csv_writer>>
#+END_SRC

#+BEGIN_SRC python :tangle tests/__init__.py 
#+END_SRC


#+BEGIN_SRC python :tangle bin/__init__.py 
#+END_SRC

* Command Line Arguments
#+name: argparse
#+BEGIN_SRC python
  parser = argparse.ArgumentParser(description="Converts html tables into csv tables")

  parser.add_argument("-v","--verbose", help="Enables verbose mode, useful for debugging.", action="store_true")
  parser.add_argument("input", help="A file to read in",type=str)
  parser.add_argument("output", help="Name of the output file", type=str)


  args = parser.parse_args()

  verboseprint = print if args.verbose else lambda *a, **k: None

#+END_SRC
* File Input
#+name: file_reader
#+BEGIN_SRC python

  def file_reader(file_):
          #Opens a file and and returns the contents as a string

          with open(file_, 'rb') as f:
                  return f.read()
          return 1
#+END_SRC

* URL Input
#+name: url_reader
#+BEGIN_SRC python
  def url_reader(url, auth=None):
          site = requests.get(url)
          return site.text

#+END_SRC

* HTML Parser
#+name: html_parser
#+BEGIN_SRC python
  from bs4 import BeautifulSoup
  import re

  def cell_text(cell):
          # strips down the cell for read-ablility
          return " ".join(cell.stripped_strings)


  def html_parser(in_,):
          """
  Takes an html string and searches for the first table.
  Using regular expressions it finds all table rows and headers.
  Then each cell of the found rows are striped and made into a list.
  Then exports that those lists in a two by two list or a Dataframe if that name suites you better.
          """
          pattern = 't[dh]'
          output = []
          soup = BeautifulSoup(in_,'html.parser')
          table = soup.find('table')
          for row in table.find_all('tr'):
                  col = [cell_text(ele)
		   for ele in row.find_all(re.compile(pattern))
		    ]
                  output.append(col)

          return output
#+END_SRC
* CSV Writer
#+name: csv_writer
#+BEGIN_SRC python
  import csv
  def csv_writer(in_, out):
          with open(out,'w') as o:
                  output = csv.writer(o)
                  for row in in_:
                          col = [ele for ele in row]
                          output.writerow(col)
                  return None
          return 1
#+END_SRC

* Execution
#+name: executable-script
#+BEGIN_SRC python :tangle bin/html2csv-script  :noweb yes :shebang #!/usr/bin/env python3
  from html2csv import *
  import argparse
  import sys
  <<argparse>>

  def main(i,o):
          if i[0:5] == "http:":
                  verboseprint("input is url")
                  RAW_TABLE = url_reader(i)
          else:
                  verboseprint("input is a file")
                  RAW_TABLE = file_reader(i)

          verboseprint("parsing RAW_HTML")
          PARSED_TABLE = html_parser(RAW_TABLE)
          verboseprint("HTML has been parsed")
          verboseprint("Writing to file")
          csv_writer(PARSED_TABLE, o)
          verboseprint("File successfully written to: ".format(o))
          return None

  verboseprint("verbose mode enabled")
  verboseprint("processing: ", args.input)
  main(
          args.input,
          args.output
          )

  sys.exit()


#+END_SRC

* Tests
** Functional Tests
#+name: functionaltests
#+BEGIN_SRC python :tangle tests/functionaltests.py 
  import unittests
  import html2csv
  import os




#+END_SRC

** Unit Tests
#+name: unittest
#+BEGIN_SRC python :tangle tests/unittests.py 
  import unittests
  import html2csv
  import os
  import sys

  class UnitTests(unittest.TestCase):


      def test_can_read_file(self):

          test_read = html2csv.file_reader("tests/testcase.html")

          self.assertNotEqual(len(test_read),0)

      def test_can_read_url(self):

          test_read = url_reader("http://www.w3schools.com/html/html_tables.asp")

          self.assertNotEqual(len(test_read),0)

      def test_can_parse_html(self):

          file_input = html2csv.file_reader("tests/testcase.html")

          parsed_table = html2csv.html_parser(file_input)

          self.assertNotEqual(len(parsed_table),0)

          control_table = [["hello","world"][1,2]['a','b']]

          self.assertEqual(parsed_table,control_table)

      def test_can_write_to_output(self):

          file_input = html2csv.file_reader("tests/testcase.html")

          parsed_table = html2csv.html_parser(file_input)

          html2csv.csv_writer(parsed_table,"tests/testoutput.csv")

          with open("tests/testoutput.csv","r") as f:
              self.assertNotEqual(len(f.read()),0)


#+END_SRC
